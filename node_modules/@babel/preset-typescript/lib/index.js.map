{"version":3,"file":"index.js","sources":["../src/normalize-options.js","../src/index.js"],"sourcesContent":["import { OptionValidator } from \"@babel/helper-validator-option\";\nconst v = new OptionValidator(\"@babel/preset-typescript\");\n\nexport default function normalizeOptions(options = {}) {\n  let { allowNamespaces = true, jsxPragma, onlyRemoveTypeImports } = options;\n\n  const TopLevelOptions = {\n    allExtensions: \"allExtensions\",\n    allowNamespaces: \"allowNamespaces\",\n    isTSX: \"isTSX\",\n    jsxPragma: \"jsxPragma\",\n    jsxPragmaFrag: \"jsxPragmaFrag\",\n    onlyRemoveTypeImports: \"onlyRemoveTypeImports\",\n    optimizeConstEnums: \"optimizeConstEnums\",\n  };\n\n  if (process.env.BABEL_8_BREAKING) {\n    v.validateTopLevelOptions(options, TopLevelOptions);\n    allowNamespaces = v.validateBooleanOption(\n      TopLevelOptions.allowNamespaces,\n      options.allowNamespaces,\n      true,\n    );\n    jsxPragma = v.validateStringOption(\n      TopLevelOptions.jsxPragma,\n      options.jsxPragma,\n      \"React\",\n    );\n    onlyRemoveTypeImports = v.validateBooleanOption(\n      TopLevelOptions.onlyRemoveTypeImports,\n      options.onlyRemoveTypeImports,\n      true,\n    );\n  }\n\n  const jsxPragmaFrag = v.validateStringOption(\n    TopLevelOptions.jsxPragmaFrag,\n    options.jsxPragmaFrag,\n    \"React.Fragment\",\n  );\n\n  const allExtensions = v.validateBooleanOption(\n    TopLevelOptions.allExtensions,\n    options.allExtensions,\n    false,\n  );\n\n  const isTSX = v.validateBooleanOption(\n    TopLevelOptions.isTSX,\n    options.isTSX,\n    false,\n  );\n  if (isTSX) {\n    v.invariant(allExtensions, \"isTSX:true requires allExtensions:true\");\n  }\n\n  const optimizeConstEnums = v.validateBooleanOption(\n    TopLevelOptions.optimizeConstEnums,\n    options.optimizeConstEnums,\n    false,\n  );\n\n  return {\n    allExtensions,\n    allowNamespaces,\n    isTSX,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums,\n  };\n}\n","import { declare } from \"@babel/helper-plugin-utils\";\nimport transformTypeScript from \"@babel/plugin-transform-typescript\";\nimport normalizeOptions from \"./normalize-options\";\n\nexport default declare((api, opts) => {\n  api.assertVersion(7);\n\n  const {\n    allExtensions,\n    allowNamespaces,\n    isTSX,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums,\n  } = normalizeOptions(opts);\n\n  const pluginOptions = process.env.BABEL_8_BREAKING\n    ? isTSX => ({\n        allowNamespaces,\n        isTSX,\n        jsxPragma,\n        jsxPragmaFrag,\n        onlyRemoveTypeImports,\n        optimizeConstEnums,\n      })\n    : isTSX => ({\n        allowDeclareFields: opts.allowDeclareFields,\n        allowNamespaces,\n        isTSX,\n        jsxPragma,\n        jsxPragmaFrag,\n        onlyRemoveTypeImports,\n        optimizeConstEnums,\n      });\n\n  return {\n    overrides: allExtensions\n      ? [\n          {\n            plugins: [[transformTypeScript, pluginOptions(isTSX)]],\n          },\n        ]\n      : [\n          {\n            // Only set 'test' if explicitly requested, since it requires that\n            // Babel is being called`\n            test: /\\.ts$/,\n            plugins: [[transformTypeScript, pluginOptions(false)]],\n          },\n          {\n            // Only set 'test' if explicitly requested, since it requires that\n            // Babel is being called`\n            test: /\\.tsx$/,\n            plugins: [[transformTypeScript, pluginOptions(true)]],\n          },\n        ],\n  };\n});\n"],"names":["v","OptionValidator","normalizeOptions","options","allowNamespaces","jsxPragma","onlyRemoveTypeImports","TopLevelOptions","allExtensions","isTSX","jsxPragmaFrag","optimizeConstEnums","validateStringOption","validateBooleanOption","invariant","declare","api","opts","assertVersion","pluginOptions","allowDeclareFields","overrides","plugins","transformTypeScript","test"],"mappings":";;;;;;;;;;;;AACA,MAAMA,CAAC,GAAG,IAAIC,qCAAJ,CAAoB,0BAApB,CAAV;AAEe,SAASC,gBAAT,CAA0BC,OAAO,GAAG,EAApC,EAAwC;AACrD,MAAI;AAAEC,IAAAA,eAAe,GAAG,IAApB;AAA0BC,IAAAA,SAA1B;AAAqCC,IAAAA;AAArC,MAA+DH,OAAnE;AAEA,QAAMI,eAAe,GAAG;AACtBC,IAAAA,aAAa,EAAE,eADO;AAEtBJ,IAAAA,eAAe,EAAE,iBAFK;AAGtBK,IAAAA,KAAK,EAAE,OAHe;AAItBJ,IAAAA,SAAS,EAAE,WAJW;AAKtBK,IAAAA,aAAa,EAAE,eALO;AAMtBJ,IAAAA,qBAAqB,EAAE,uBAND;AAOtBK,IAAAA,kBAAkB,EAAE;AAPE,GAAxB;AA6BA,QAAMD,aAAa,GAAGV,CAAC,CAACY,oBAAF,CACpBL,eAAe,CAACG,aADI,EAEpBP,OAAO,CAACO,aAFY,EAGpB,gBAHoB,CAAtB;AAMA,QAAMF,aAAa,GAAGR,CAAC,CAACa,qBAAF,CACpBN,eAAe,CAACC,aADI,EAEpBL,OAAO,CAACK,aAFY,EAGpB,KAHoB,CAAtB;AAMA,QAAMC,KAAK,GAAGT,CAAC,CAACa,qBAAF,CACZN,eAAe,CAACE,KADJ,EAEZN,OAAO,CAACM,KAFI,EAGZ,KAHY,CAAd;;AAKA,MAAIA,KAAJ,EAAW;AACTT,IAAAA,CAAC,CAACc,SAAF,CAAYN,aAAZ,EAA2B,wCAA3B;AACD;;AAED,QAAMG,kBAAkB,GAAGX,CAAC,CAACa,qBAAF,CACzBN,eAAe,CAACI,kBADS,EAEzBR,OAAO,CAACQ,kBAFiB,EAGzB,KAHyB,CAA3B;AAMA,SAAO;AACLH,IAAAA,aADK;AAELJ,IAAAA,eAFK;AAGLK,IAAAA,KAHK;AAILJ,IAAAA,SAJK;AAKLK,IAAAA,aALK;AAMLJ,IAAAA,qBANK;AAOLK,IAAAA;AAPK,GAAP;AASD;;ACnED,YAAeI,yBAAO,CAAC,CAACC,GAAD,EAAMC,IAAN,KAAe;AACpCD,EAAAA,GAAG,CAACE,aAAJ,CAAkB,CAAlB;AAEA,QAAM;AACJV,IAAAA,aADI;AAEJJ,IAAAA,eAFI;AAGJK,IAAAA,KAHI;AAIJJ,IAAAA,SAJI;AAKJK,IAAAA,aALI;AAMJJ,IAAAA,qBANI;AAOJK,IAAAA;AAPI,MAQFT,gBAAgB,CAACe,IAAD,CARpB;;AAUA,QAAME,aAAa,GASfV,KAAK,KAAK;AACRW,IAAAA,kBAAkB,EAAEH,IAAI,CAACG,kBADjB;AAERhB,IAAAA,eAFQ;AAGRK,IAAAA,KAHQ;AAIRJ,IAAAA,SAJQ;AAKRK,IAAAA,aALQ;AAMRJ,IAAAA,qBANQ;AAORK,IAAAA;AAPQ,GAAL,CATT;;AAmBA,SAAO;AACLU,IAAAA,SAAS,EAAEb,aAAa,GACpB,CACE;AACEc,MAAAA,OAAO,EAAE,CAAC,CAACC,uCAAD,EAAsBJ,aAAa,CAACV,KAAD,CAAnC,CAAD;AADX,KADF,CADoB,GAMpB,CACE;AAGEe,MAAAA,IAAI,EAAE,OAHR;AAIEF,MAAAA,OAAO,EAAE,CAAC,CAACC,uCAAD,EAAsBJ,aAAa,CAAC,KAAD,CAAnC,CAAD;AAJX,KADF,EAOE;AAGEK,MAAAA,IAAI,EAAE,QAHR;AAIEF,MAAAA,OAAO,EAAE,CAAC,CAACC,uCAAD,EAAsBJ,aAAa,CAAC,IAAD,CAAnC,CAAD;AAJX,KAPF;AAPC,GAAP;AAsBD,CAtDqB,CAAtB;;;;"}